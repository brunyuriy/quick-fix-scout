0.2.4: 	Initial implementation.
0.3.0: 	Implementation of completion proposal calculation priority.
0.4.0: 	Implementation of premature termination of speculative analysis.
0.5.0: 	Fixed a nasty bug between QFSpeculationCalculator and QFSpeculationGrabber that would cause N/A compilation errors if the quick fix dialog were to 
		clicked very fast. 
		Optimizations done in QFSpeculationGrabber and some minor related changes in QFSpeculationCalculator.
0.5.1:	Changed the implementation logic of QFSpeculationGrabber. In the new version, if there speculative analysis ended, it behaves like the old logic. 
		However, if there is a running speculative analysis the moment the grabber is created, it adds itself as a listener to the current speculative analysis 
		and all the update is taken care of by QFSpeculationCalculator.
0.5.2:	Added a check box to activate/deactivate the speculation plug-in in the preference pages. Let the user to choose.
0.6.0:	Implemented workspace wide speculation. The user no longer needs to select the project s/he wants to speculate on. The active project is directly speculated.
0.6.1:	Fixed a NullPointerException bug in CompletionProposalPopupCoordinator.java that was preventing user to select a quick fix when speculator plug-in was disabled.
0.6.2:	Feature implementation for coloring the proposals offered after the speculative analysis.
		Red is used for proposals that increase the number of compilation errors with respect to the current state of the project.
		Green is used for proposals that decrease this number and no color is used if the number of compilation errors don't change.
0.7.0:	Feature Implementation: 'smart quick fixes'.
		They are implemented by recording the 'best' proposals offered during the speculative analysis and then adding them to the current selected quick fix.
		During the implementation, I changed QuickFixCalculator to create AugmentedCompletionProposals instead of just generating number of compilation errors.
		Also, while creating AugmentedCompletionProposals, the real proposal that will be applied to the original project is used so that adding the best proposal can be done.
0.7.1:	Minor improvement over the comparing problem locations.
		I don't compare the offsets any more, instead I compare the problem arguments. 
		If the arguments differ, I try them to promote IFiles and compare IFile's project relative paths. 
		If this also fails, then problem locations are marked as different.
0.7.2:	Clean up in SpeculationCalculator and SpeculationGrabber for smart quick fixes implementation.
		Integration of the new algorithm for comparing problem locations into SpeculationCalculator.
0.8.0:	Initial implementation for proposal transformations.
		Comparing problem locations no more work, got rid of it.
		Fix for smart quick fix implementation.
0.8.1:	Added version number to the preference page.
0.8.2:	Initial implementation of bridge between the speculator and observer. Implementation does not contain the settings for 3 different functionalities yet.
0.8.3:	Initial pass for SpeculationCalculator class. Changed many variable accesses with fine grained locking. Documented most of the accesses.
0.7.5:	Made the transformations a new plug-in.
0.7.6:	Improvements on Preference Page implementation.
0.7.7:	Addition of the bridge between the speculator and observer to the preference page.
0.7.8:	Getting original proposals from the original project instead of using the converter plug-in.
0.7.9:	Minor windows fixes (and workarounds).
0.7.10:	Added version logging.
0.7.11:	Fixed a NPE during calculating the best proposal.
0.7.12:	Minor NPR exception handling for extreme cases.
0.7.13:	Reduced the synchronization used in SpeculationCalculator (i.e., for fields only accessed used volatile instead of locks).
0.8.0:	Version update for the new release (and possible fix in refactorings).
		Changed the name of the plug-in to Quick Fix Scout (in the preference pages).
0.8.1:	Added 'check version' button to the preference page. Updated external version numbers.
0.8.2:	Added automated version checking at the beginning when plug-in loads.
0.8.3: 	Updated bridge implementation so that we can log if the analysis is running or not.
0.9.0:	Implemented context aware global best proposals. The global best proposals are no longer showed if they do not fix the local compilation error.
0.9.1:	Implemented optimized calculation for calculating global best proposals. Now, we are not getting offered proposals (through QuickFixProcessor) for the original project for all 
		compilation errors, however this computation is delayed until we need to look this up for a guaranteed global best proposal.
0.9.2:	Implemented support for getting local and global analysis calculation times so that they can be also logged.
0.9.3:	Implemented auto-save and auto-build properties before any analysis start so that the retrieved compilation errors and offered proposals will always match with the shadow project.
0.9.4:	Now using Timer library instead of TimeUtility.
1.0.4:	Implemented better context for global best proposals in AugmentedCompletionProposal.java. (issue 6)
1.1.4:	Implemented support for multiple compilation errors (problem locations) on the same line. (issue 22)
1.1.5:	Updated the speculative analysis calculation priority with the new notification mechanism: CursorChange observer pattern. (issue 26)
1.1.6:	Forced save is now done when the user invokes a quick fix (and before the dialog is created). This way, the analysis no longer closes user dialogs (i.e., auto-complete). (issue 30)
1.2.7:	Updated the internal mechanism so that a known proposal that forces a sync (because of an Eclipse undo bug) is no longer computed and shown as '?' in the dialog. (issue 8)
1.2.8:	Updated the way proposal display strings are re-written to the dialog so that duplicated proposals are no longer shown. (issue 11)
1.2.9:	Updated the analysis protocol so that it will first try to join with Eclipse auto-builder (if active), deactivate the auto builder, do the analysis and reactivate it. This is done so that
		Eclipse auto builder won't clash with the incremental build calls done on the shadow project. (issue 20)
1.3.0:	Updated the implementation so that typing session now really affects the computation delay. (issue 28)
1.3.1:	Removed dependency for Speculation Converter.
1.4.1:	Added heuristic based optimization that uses previous speculative analysis results in case there is no change in the compilation errors in the project (number and content).
		It is not perfect, but it is a start. (issue 40)
1.4.2:	The proposals that requires user interaction are no longer computed (issue 42).
1.5.2:	Overall improvements for speculative analysis and its robustness. Aimed to increase user experience.
1.5.3:	Minor point update for the release.